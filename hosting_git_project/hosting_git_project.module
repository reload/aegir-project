<?php
/**
 * @file
 * Git Hosting Module
 */

include_once 'hosting_git_project.node.inc';
include_once 'hosting_git_project.form.inc';

/**
 * Implements of hook_menu().
 */
function hosting_git_project_menu() {
  $items = array();
  $items['hosting/project'] = array(
    'title' => 'Projects',
    'description' => 'List of projects',
    'page callback' => 'hosting_git_project_listing',
    'access arguments' => array('view project'));

  $items['hosting/project/access'] = array(
    'title' => 'Access',
    'description' => '',
    'page callback' => 'hosting_git_project_access',
    'access arguments' => array('view project'));



  // Add routes for tasks.
  foreach (array('git_project', 'git_project_deployment') as $type) {
    if (!($tasks = hosting_available_tasks($type))) {
      // this is to workaround problems in the upgrade path where the
      // hook returns nothing (e.g. for server)
      continue;
    }
    foreach ($tasks as $task => $info) {
      if (empty($info['hidden'])) {
        // Use a custom loader
        $path = sprintf("node/%%hosting_%s_node/%s_%s", $type, $type, $task);
        $items[$path] = array(
           'title' => $info['title'],
           'description' => $info['description'],
           'page callback' => 'drupal_get_form',
           'page arguments' => array('hosting_task_confirm_form', 1, $task),
           // TODO
           // 'access callback' => 'hosting_task_menu_access_csrf',
           'access callback' => TRUE,
           // 'access arguments' => array(1, $task),
           'type' => MENU_CALLBACK,
         );
        $items[$path] = array_merge($items[$path], $info);
      }
    }
  }

  return $items;
}

/**
 * Implements of hook_hosting_tasks().
 */
function hosting_git_project_hosting_tasks() {
  $tasks = array();
  $tasks['git_project']['verify'] = array(
    'title' => t('Verify'),
    'description' => t('Verify a project'),
    'access callback' => 'hosting_git_project_hosting_task_access',
  );

  $tasks['git_project_deployment']['verify'] = array(
    'title' => t('Verify'),
    'description' => t('Verify a deployment'),
    'dialog' => TRUE,
    'access callback' => 'hosting_git_project_hosting_task_access',
  );

  // TODO; use arg() to figure out whether to deploy or redeploy
  $tasks['git_project_deployment']['git_project_deploy'] = array(
    'title' => t('Deploy'),
    'description' => t('Execute (re)deployment of the deployment specification. Please specify any revision overrides that should be used for this deployment.'),
    'dialog' => TRUE,
    'access callback' => 'hosting_git_project_hosting_task_access',
  );

  return $tasks;
}

/**
 * Implements of hook_hosting_task_TASK_TYPE_form().
 * hook_hosting_task_TASK_TYPE_form
 */
// hosting_task_git-project-redeploy_form
function hosting_task_git_project_deploy_form($node) {
  $form['deployment_branch'] = array(
    '#title' => t('Branch'),
    '#type' => 'textfield',
    '#description' => t('Branch to use for this deployment.'),
    '#size' => 40,
    '#default_value' => $node->deployment_branch,
    '#maxlength' => 255,
  );

  $form['deployment_tag'] = array(
    '#title' => t('Tag'),
    '#type' => 'textfield',
    '#description' => t('Tag to use for this deployment.'),
    '#size' => 40,
    '#default_value' => $node->deployment_tag,
    '#maxlength' => 255,
  );

  $form['deployment_revision'] = array(
    '#title' => t('Sha'),
    '#type' => 'textfield',
    '#description' => t('SHA to use for this deployment.'),
    '#size' => 40,
    '#default_value' => $node->deployment_revision,
    '#maxlength' => 255,
  );

  return $form;
}

/**
 * Implements hook_hosting_task_access().
 */
function hosting_git_project_hosting_task_access($node = NULL, $task = NULL) {
  return TRUE;
}

/**
 * Implements of hook_perm().
 */
function hosting_git_project_perm() {
  return array(
    'create deploy task',
  );
}

/**
 * Simple list for top level navigation.
 */
function hosting_git_project_listing() {
  $projects = _hosting_git_project_get_projects();

  $header = array(t('Project') , t('Basedomain'), t('Profile'));

  $rows[] = array();

  $total = 0;
  foreach ($projects as $nid => $title) {
    $row = array();
    $node = node_load($nid);
    $row[] = _hosting_node_link($node->nid, $node->title);
    $row[] = $node->base_domain;
    $row[] = $node->install_profile;
    $rows[] = array('data' => $row);
  }

  return theme('table', $header, $rows, array('class' => 'project-table'));
}

/**
 * Simple list for top level navigation.
 */
function hosting_git_deployment_deployment_list($project_nid) {
  $deployments = _hosting_git_project_get_deployments($project_nid);

  $header = array(t('Name') , t('Branch'), t('Tag'));

  $rows[] = array();

  $total = 0;
  foreach ($deployments as $nid => $title) {
    $row = array();
    $node = node_load($nid);
    $row[] = _hosting_node_link($node->nid, $node->title);
    $row[] = $node->deployment_branch;
    $row[] = $node->deployment_tag;
    $rows[] = array('data' => $row);
  }

  return theme('table', $header, $rows, array('class' => 'project-table'));
}

/**
 * Implements hook_nodeapi().
 *
 * Detects when a platform or site is created and creates projects and deployme
 */
function hosting_git_project_nodeapi(&$node, $op, $a3 = NULL) {

  if ($node->type == 'platform') {
    if ($op == 'insert') {
      //dd("platform node inserted");
      //dd($node);
    }
  }

  if ($node->type == 'site') {
    if ($op == 'insert') {
      //dd("platform node inserted");
      //dd($node);
    }
  }
}

/**
 * Small helper function to get platforms that haven't been deleted.
 */
function _hosting_git_project_get_projects() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n LEFT JOIN {hosting_git_project} p ON n.nid = p.nid AND n.vid = p.vid
                      WHERE n.type='git_project' AND n.status=1 ORDER BY n.title");
  while ($project = db_fetch_object($result)) {
    $return[$project->nid] = $project->title;
  }
  return $return;
}

/**
 * Small helper function to get platforms that haven't been deleted.
 */
function _hosting_git_project_get_deployments($project_nid) {
  $return = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n LEFT JOIN {hosting_git_project_deployment} d ON n.nid = d.nid AND n.vid = d.vid
                      WHERE n.type='git_project_deployment' AND n.status=1 AND d.git_project = %d ORDER BY n.title",
                      array($project_nid));
  while ($deployment = db_fetch_object($result)) {
    $return[$deployment->nid] = $deployment->title;
  }
  return $return;
}

/**
 * Implements hook_hosting_project_context_options().
 *
 * This transfers data from the node to the aegir context object (the alias!)
 * For project entities.
 */
function hosting_git_project_hosting_git_project_context_options(&$task) {
  $task->context_options['project_name'] = $task->ref->title;
  $task->context_options['makefile_url'] = $task->ref->makefile_url;
  $task->context_options['project_type'] = $task->ref->project_type;
  $task->context_options['install_profile'] = $task->ref->install_profile;
  $task->context_options['domain_basename'] = $task->ref->domain_basename;

  // Resolve references.
  if (is_numeric($task->ref->web_server)) {
    $web_server = node_load($task->ref->web_server);
    $task->context_options['web_server'] = '@' . $web_server->hosting_name;
  }

  if (is_numeric($task->ref->db_server)) {
    $db_server = node_load($task->ref->db_server);
    $task->context_options['db_server'] = '@' . $db_server->hosting_name;
  }
}

/**
 * Implements hook_hosting_project_context_options().
 *
 * This transfers data from the node to the aegir context object (the alias!)
 * For project_deployment entities.
 */
function hosting_git_project_hosting_git_project_deployment_context_options(&$task) {

  // Resolve project reference.
  if (is_numeric($task->ref->git_project)) {
    $git_project = node_load($task->ref->git_project);
    $task->context_options['git_project'] = '@' . $git_project->hosting_name;
  }

  $task->context_options['deployment_name'] = $task->ref->title;
  $task->context_options['deployment_branch'] = $task->ref->deployment_branch;
  $task->context_options['deployment_tag'] = $task->ref->deployment_tag;
  $task->context_options['deployment_revision'] = $task->ref->deployment_revision;

  // Resolve project and site references.
  if (is_numeric($task->ref->platform)) {
    $platform = node_load($task->ref->platform);
    $task->context_options['platform'] = '@' . $platform->hosting_name;
  }

  if (is_numeric($task->ref->site)) {
    $site = node_load($task->ref->site);
    $task->context_options['site'] = '@' . $site->hosting_name;
  }
}
